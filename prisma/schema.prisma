// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}
datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}



enum ProductVisibility {
    PUBLISHED
    HIDDEN
    DRAFT
}
model Product {
    id                  String              @id @default(auto()) @map("_id") @db.ObjectId
    createdAt           DateTime            @default(now())
    updatedAt           DateTime            @updatedAt
    
    visibility          ProductVisibility
    
    name                String
    
    price               Float               // min: 0
    shippingWeight      Float?              // min: 0
    
    stock               Int?                // min: 0
    
    path                String              @unique
    
    excerpt             String?
    description         Json?
    
    images              String[]
    
    orders              OrdersOnProducts[]
}



type ShippingRate {
    startingWeight      Float               // min: 0, max: 1000     
    rate                Float               // min: 0, max: 999999999
}
type CoverageCity {
    city                String              // minLength: 3, maxLength: 50
    
    estimate            String?             // minLength: 2, maxLength: 50
    shippingRates       ShippingRate[]
}
type CoverageZone {
    zone                String              // minLength: 3, maxLength: 50
    
    estimate            String?             // minLength: 2, maxLength: 50
    shippingRates       ShippingRate[]
    
    useSpecificArea     Boolean?
    cities              CoverageCity[]
}
type CoverageCountry {
    country             String              // minLength: 2, maxLength: 3
    
    estimate            String?             // minLength: 2, maxLength: 50
    shippingRates       ShippingRate[]
    
    useSpecificArea     Boolean?
    zones               CoverageZone[]
}
model ShippingProvider {
    id                  String              @id @default(auto()) @map("_id") @db.ObjectId
    createdAt           DateTime            @default(now())
    updatedAt           DateTime            @updatedAt
    
    enabled             Boolean
    name                String              // minLength: 2, maxLength: 50
    
    weightStep          Float               // min: 0, max: 1000
    
    estimate            String?             // minLength: 2, maxLength: 50
    shippingRates       ShippingRate[]
    
    useSpecificArea     Boolean?
    countries           CoverageCountry[]
    
    orders              Order[]             @relation("OrdersOnShipping") // one Shipping can handle many Order[] BUT one Order cannot handle many Shipping[]
}



model Customer {
    id                  String              @id @default(auto()) @map("_id") @db.ObjectId
    createdAt           DateTime            @default(now())
    updatedAt           DateTime            @updatedAt
    
    marketingOpt        Boolean?
    
    nickName            String              // minLength: 2, maxLength: 30
    email               String              // minLength: 5, maxLength: 50
    
    orders              Order[]             @relation("OrdersOnCustomer") // one Customer can have many Order[] BUT one Order cannot have many Customer[]
}



model OrdersOnProducts { // one Product can have many Order[] AND one Order can have many Product[]
    // @@id([productId, orderId])
    id                  String              @id @default(auto()) @map("_id") @db.ObjectId
    
    productId           String              @db.ObjectId
    product             Product             @relation(fields: [productId], references: [id])
    
    orderId             String              @db.ObjectId
    order               Order               @relation(fields: [orderId],references: [id])
    
    price               Float               // min: 0
    shippingWeight      Float?              // min: 0
    quantity            Int                 // min: 1
}
type Address {
    firstName           String              // minLength: 2 , maxLength: 30
    lastName            String              // minLength: 1 , maxLength: 30
    
    phone               String              // minLength: 5 , maxLength: 15
    
    address             String              // minLength: 5 , maxLength: 90
    city                String              // minLength: 3 , maxLength: 50
    zone                String              // minLength: 3 , maxLength: 50
    zip                 String?             // minLength: 2 , maxLength: 11
    country             String              // minLength: 2 , maxLength:  3
}
enum PaymentType {
    CARD
    PAYPAL
    MANUAL
    MANUAL_PAID
}
type PaymentMethod {
    type                PaymentType
    brand               String?
    identifier          String?
    
    amount              Float               // min: 0
    fee                 Float               // min: 0
}
model Order {
    id                  String              @id @default(auto()) @map("_id") @db.ObjectId
    createdAt           DateTime            @default(now())
    updatedAt           DateTime            @updatedAt
    orderId             String              @unique // a secondary id for public identifier
    
    items               OrdersOnProducts[]
    
    customerId          String              @db.ObjectId
    customer            Customer            @relation(fields: [customerId], references: [id], "OrdersOnCustomer") // one Customer can have many Order[] BUT one Order cannot have many Customer[]
    
    shippingAddress     Address?
    shippingCost        Float?              // min: 0
    shippingId          String              @db.ObjectId
    shippingProvider    ShippingProvider    @relation(fields: [shippingId], references: [id], "OrdersOnShipping") // one Shipping can handle many Order[] BUT one Order cannot handle many Shipping[]
    
    billingAddress      Address?
    paymentMethod       PaymentMethod
}
