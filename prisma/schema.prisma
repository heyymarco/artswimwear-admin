// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}
datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}



// e-commerce models --------------------------------------------------------------------------



enum ProductVisibility {
    PUBLISHED
    HIDDEN
    DRAFT
}
model Product {
    // records:
    id                              String                          @id @default(cuid()) @map("_id")
    createdAt                       DateTime                        @default(now())
    updatedAt                       DateTime                        @updatedAt
    
    // data:
    visibility                      ProductVisibility
    
    name                            String
    
    price                           Float                           // min: 0
    shippingWeight                  Float?                          // min: 0
    
    stock                           Int?                            // min: 0
    
    path                            String                          @unique
    
    excerpt                         String?
    description                     Json?
    
    images                          String[]
    
    // relations:
    orders                          OrdersOnProducts[]              // some Product(s) may have some related Order(s)      // many to many
    draftOrders                     DraftOrdersOnProducts[]         // some Product(s) may have some related DraftOrder(s) // many to many
    
    variantGroups                   VariantGroup[]                  // a Product may have some related VariantGroup(s)     // one  to many
    stocks                          Stock[]                         // a Product may have some related Stock(s)            // one  to many
}
model VariantGroup {
    // records:
    id                              String                          @id @default(cuid()) @map("_id")
    createdAt                       DateTime                        @default(now())
    updatedAt                       DateTime                        @updatedAt
    
    // data:
    sort                            Int
    
    name                            String
    hasDedicatedStocks              Boolean
    
    // relations:
    variants                        Variant[]                       // a VariantGroup may have some related Variant(s) // one  to many
    
    productId                       String
    product                         Product                         @relation(fields: [productId], references: [id], onDelete: Cascade) // delete the related VariantGroup(s) if the Product deleted
}
enum VariantVisibility {
    PUBLISHED
    DRAFT
}
model Variant {
    // records:
    id                              String                          @id @default(cuid()) @map("_id")
    createdAt                       DateTime                        @default(now())
    updatedAt                       DateTime                        @updatedAt
    
    // data:
    visibility                      VariantVisibility
    sort                            Int
    
    name                            String
    
    price                           Float?                          // min: 0
    shippingWeight                  Float?                          // min: 0
    
    images                          String[]
    
    // relations:
    variantGroupId                  String
    variantGroup                    VariantGroup                    @relation(fields: [variantGroupId], references: [id], onDelete: Cascade) // delete the related Variant(s) if the VariantGroup deleted
}
model TemplateVariantGroup {
    // records:
    id                              String                          @id @default(cuid()) @map("_id")
    createdAt                       DateTime                        @default(now())
    updatedAt                       DateTime                        @updatedAt
    
    // data:
    name                            String
    hasDedicatedStocks              Boolean
    
    // relations:
    templateVariants                TemplateVariant[]               // a TemplateVariantGroup may have some related TemplateVariant(s) // one  to many
}
model TemplateVariant {
    // records:
    id                              String                          @id @default(cuid()) @map("_id")
    createdAt                       DateTime                        @default(now())
    updatedAt                       DateTime                        @updatedAt
    
    // data:
    visibility                      VariantVisibility
    sort                            Int
    
    name                            String
    
    price                           Float?                          // min: 0
    shippingWeight                  Float?                          // min: 0
    
    images                          String[]
    
    // relations:
    templateVariantGroupId          String
    templateVariantGroup            TemplateVariantGroup            @relation(fields: [templateVariantGroupId], references: [id], onDelete: Cascade) // delete the related TemplateVariant(s) if the TemplateVariantGroup deleted
}
model Stock {
    // records:
    id                              String                          @id @default(cuid()) @map("_id")
    
    // data:
    value                           Int?                            // min: 0
    
    // relations:
    productId                       String
    product                         Product                         @relation(fields: [productId], references: [id], onDelete: Cascade) // delete the related Stock(s) if the Product deleted
    
    variantIds                      String[]                        // manual relation foreign key(s)
}



model ShippingProvider {
    // records:
    id                              String                          @id @default(cuid()) @map("_id")
    createdAt                       DateTime                        @default(now())
    updatedAt                       DateTime                        @updatedAt
    
    // data:
    visibility                      ShippingVisibility
    
    autoUpdate                      Boolean                         @default(false)
    origin                          ShippingOrigin?
    
    name                            String                          // minLength: 2, maxLength: 50
    
    weightStep                      Float                           // min: 0, max: 1000
    eta                             ShippingEta?
    rates                           ShippingRate[]
    
    useZones                        Boolean
    zones                           CoverageCountry[]
    
    // relations:
    orders                          Order[]                         @relation("OrdersOnShipping")      // one ShippingProvider may have some related Order(s)       // one  to many
    draftOrders                     DraftOrder[]                    @relation("DraftOrdersOnShipping") // one ShippingProvider may have some related DraftOrder(s)  // one  to many
}
type CoverageCountry {
    // data:
    name                            String                          // minLength: 2, maxLength: 3
    
    eta                             ShippingEta?
    rates                           ShippingRate[]
    
    useZones                        Boolean
    zones                           CoverageState[]
}
type CoverageState {
    // data:
    name                            String                          // minLength: 3, maxLength: 50
    
    eta                             ShippingEta?
    rates                           ShippingRate[]
    
    useZones                        Boolean
    zones                           CoverageCity[]
}
type CoverageCity {
    // records:
    updatedAt                       DateTime?
    
    // data:
    name                            String                          // minLength: 3, maxLength: 50
    
    eta                             ShippingEta?
    rates                           ShippingRate[]
}
enum ShippingVisibility {
    PUBLISHED
    DRAFT
}
type ShippingOrigin {
    // data:
    country                         String                          // minLength: 2 , maxLength:  3
    state                           String                          // minLength: 3 , maxLength: 50
    city                            String                          // minLength: 3 , maxLength: 50
}
type ShippingEta {
    // data:
    min                             Float                           // min: 0, max: 999
    max                             Float                           // min: `min`, max: 999
}
type ShippingRate {
    // data:
    start                           Float                           // min: 0, max: 1000
    rate                            Float                           // min: 0, max: 999999999
}



model Customer {
    // records:
    id                              String                          @id @default(cuid()) @map("_id")
    createdAt                       DateTime                        @default(now())
    updatedAt                       DateTime                        @updatedAt
    
    // data:
    name                            String                                  // minLength: 2, maxLength: 30
    email                           String                          @unique // minLength: 5, maxLength: 50
    
    // relations:
    orders                          Order[]                         @relation("OrdersOnCustomer")      // one Customer may have some related Order(s)       // one  to many
    draftOrders                     DraftOrder[]                    @relation("DraftOrdersOnCustomer") // one Customer may have some related DraftOrder(s)  // one  to many
    customerPreference              CustomerPreference?             // a Customer may have one related CustomerPreference                                   // one  to one
}
model CustomerPreference {
    // records:
    id                              String                          @id @default(cuid()) @map("_id")
    
    // data:
    marketingOpt                    Boolean?
    timezone                        Float?
    
    // relations:
    customerId                      String                          @unique
    customer                        Customer                        @relation(fields: [customerId], references: [id], onDelete: Cascade) // delete the related CustomerPreference if the Customer deleted
}

model Guest {
    // records:
    id                              String                          @id @default(cuid()) @map("_id")
    createdAt                       DateTime                        @default(now())
    updatedAt                       DateTime                        @updatedAt
    
    // data:
    name                            String                          // minLength: 2, maxLength: 30
    email                           String                          // minLength: 5, maxLength: 50
    
    // relations:
    orders                          Order[]                         @relation("OrdersOnGuest")      // one Guest may have some related Order(s)        // one  to many
    draftOrders                     DraftOrder[]                    @relation("DraftOrdersOnGuest") // one Guest may have some related DraftOrder(s)   // one  to many
    guestPreference                 GuestPreference?                                                // one Guest may have one  related GuestPreference // one  to one
}
model GuestPreference {
    // records:
    id                              String                          @id @default(cuid()) @map("_id")
    
    // data:
    marketingOpt                    Boolean?
    timezone                        Float?
    
    // relations:
    guestId                         String                          @unique
    guest                           Guest                           @relation(fields: [guestId], references: [id], onDelete: Cascade) // delete the related GuestPreference if the Guest deleted
}



model Country {
    // records:
    id                              String                          @id @default(cuid()) @map("_id")
    
    // data:
    enabled                         Boolean
    name                            String
    
    code                            String                          // minLength: 2 , maxLength:  3
    dialCode                        String
}



type Address {
    // data:
    country                         String                          // minLength: 2 , maxLength:  3
    state                           String                          // minLength: 3 , maxLength: 50
    city                            String                          // minLength: 3 , maxLength: 50
    zip                             String?                         // minLength: 2 , maxLength: 11
    address                         String                          // minLength: 5 , maxLength: 90
    
    firstName                       String                          // minLength: 2 , maxLength: 30
    lastName                        String                          // minLength: 1 , maxLength: 30
    phone                           String                          // minLength: 5 , maxLength: 15
}
enum PaymentType {
    CARD
    PAYPAL
    EWALLET
    CUSTOM
    MANUAL
    MANUAL_PAID
}
type Payment {
    // data:
    type                            PaymentType
    brand                           String?
    identifier                      String?
    expiresAt                       DateTime?
    
    amount                          Float                           // min: 0
    fee                             Float                           // min: 0
    
    billingAddress                  Address?
}
model PaymentConfirmation {
    // records:
    id                              String                          @id @default(cuid()) @map("_id")
    reportedAt                      DateTime?                       // manually set
    reviewedAt                      DateTime?                       // manually set
    
    // data:
    token                           String                          @unique
    
    amount                          Float?                          // min: 0
    payerName                       String?                         // minLength: 2, maxLength: 50
    paymentDate                     DateTime?
    
    originatingBank                 String?                         // minLength: 2, maxLength: 50
    destinationBank                 String?                         // minLength: 2, maxLength: 50
    
    rejectionReason                 Json?
    
    // relations:
    orderId                         String                          @unique
    order                           Order                           @relation(fields: [orderId], references: [id], onDelete: Cascade) // delete the related PaymentConfirmation if the Order deleted
}
enum OrderStatus {
    NEW_ORDER
    CANCELED
    EXPIRED
    PROCESSED
    ON_THE_WAY
    IN_TROUBLE
    COMPLETED
}
type PreferredCurrency {
    // data:
    currency                        String                          // minLength: 3, maxLength: 3
    rate                            Float                           // min: 0
}
model Order {
    // records:
    id                              String                          @id @default(cuid()) @map("_id")
    createdAt                       DateTime                        @default(now())
    updatedAt                       DateTime                        @updatedAt
    
    // data:
    orderId                         String                          @unique // a secondary id for public identifier
    paymentId                       String?                         @unique // a secondary id for public identifier
    
    orderStatus                     OrderStatus                     @default(NEW_ORDER)
    orderTrouble                    Json?
    cancelationReason               Json?
    
    preferredCurrency               PreferredCurrency?
    
    shippingAddress                 Address?
    shippingCost                    Float?                          // min: 0
    
    payment                         Payment
    
    // relations:
    items                           OrdersOnProducts[]              // some Product(s) may have some related Order(s)  // many to many
    
    customerId                      String?
    customer                        Customer?                       @relation(fields: [customerId]         , references: [id], "OrdersOnCustomer", onDelete: SetNull) // preserve the related Order(s) if the Customer deleted
    
    guestId                         String?
    guest                           Guest?                          @relation(fields: [guestId]            , references: [id], "OrdersOnGuest"   , onDelete: SetNull) // preserve the related Order(s) if the Guest deleted
    
    shippingProviderId              String?
    shippingProvider                ShippingProvider?               @relation(fields: [shippingProviderId] , references: [id], "OrdersOnShipping", onDelete: SetNull) // preserve the related Order(s) if the ShippingProvider deleted
    
    paymentConfirmation             PaymentConfirmation?            // an Order may have one related PaymentConfirmation // one to one
    
    shippingTracking                ShippingTracking?               // an Order may have one related ShippingTracking // one to one
}
model OrdersOnProducts {
    // records:
    // @@id([productId, orderId])
    id                              String                          @id @default(cuid()) @map("_id")
    
    // data:
    price                           Float                           // min: 0
    shippingWeight                  Float?                          // min: 0
    quantity                        Int                             // min: 1
    
    // relations:
    orderId                         String
    order                           Order                           @relation(fields: [orderId]     , references: [id], onDelete: Cascade) // delete the related OrdersOnProducts(s) if the Order deleted
    
    productId                       String?
    product                         Product?                        @relation(fields: [productId]   , references: [id], onDelete: SetNull) // preserve the related Order(s) if the Product deleted
    
    variantIds                      String[]                        // manual relation foreign key(s)
}
model DraftOrder {
    // records:
    id                              String                          @id @default(cuid()) @map("_id")
    createdAt                       DateTime                        @default(now())
    expiresAt                       DateTime
    
    // data:
    orderId                         String                          @unique // a secondary id for public identifier
    paymentId                       String?                         @unique // a secondary id for public identifier
    
    preferredCurrency               PreferredCurrency?
    
    shippingAddress                 Address?
    shippingCost                    Float?                          // min: 0
    
    // relations:
    items                           DraftOrdersOnProducts[]         // some Product(s) may have some related DraftOrder(s)  // many to many
    
    customerId                      String?
    customer                        Customer?                       @relation(fields: [customerId]         , references: [id], "DraftOrdersOnCustomer", onDelete: SetNull) // preserve the related DraftOrder(s) if the Customer deleted
    
    guestId                         String?
    guest                           Guest?                          @relation(fields: [guestId]            , references: [id], "DraftOrdersOnGuest"   , onDelete: SetNull) // preserve the related DraftOrder(s) if the Guest deleted
    
    shippingProviderId              String?
    shippingProvider                ShippingProvider?               @relation(fields: [shippingProviderId] , references: [id], "DraftOrdersOnShipping", onDelete: SetNull) // preserve the related DraftOrder(s) if the ShippingProvider deleted
}
model DraftOrdersOnProducts {
    // records:
    // @@id([productId, draftOrderId])
    id                              String                          @id @default(cuid()) @map("_id")
    
    // data:
    price                           Float                           // min: 0
    shippingWeight                  Float?                          // min: 0
    quantity                        Int                             // min: 1
    
    // relations:
    draftOrderId                    String
    draftOrder                      DraftOrder                      @relation(fields: [draftOrderId], references: [id], onDelete: Cascade) // delete the related DraftOrdersOnProducts(s) if the DraftOrder deleted
    
    productId                       String?
    product                         Product?                        @relation(fields: [productId]   , references: [id], onDelete: SetNull) // preserve the related DraftOrder(s) if the Product deleted
    
    variantIds                      String[]                        // manual relation foreign key(s)
}
model ShippingTracking {
    // records:
    id                              String                          @id @default(cuid()) @map("_id")
    
    // data:
    token                           String                          @unique
    
    shippingCarrier                 String?                         // minLength: 1, maxLength: 50
    shippingNumber                  String?                         // minLength: 1, maxLength: 50
    
    // relations:
    orderId                         String                          @unique
    order                           Order                           @relation(fields: [orderId], references: [id], onDelete: Cascade)  // delete the related ShippingTracking if the Order deleted
    
    shippingTrackingLogs            ShippingTrackingLog[]           // a ShippingTracking may have some related ShippingTrackingLog(s) // one  to many
}
model ShippingTrackingLog {
    // records:
    id                              String                          @id @default(cuid()) @map("_id")
    reportedAt                      DateTime?                       // manually set
    
    // data:
    log                             String
    
    // relations:
    shippingTrackingId              String
    shippingTracking                ShippingTracking                @relation(fields: [shippingTrackingId], references: [id], onDelete: Cascade) // delete the related ShippingTrackingLog(s) if the ShippingTracking deleted
}



// admin models -------------------------------------------------------------------------------



model Admin {
    // records:
    id                              String                          @id @default(cuid()) @map("_id")
    createdAt                       DateTime                        @default(now())
    updatedAt                       DateTime                        @updatedAt
    
    // data:
    name                            String
    email                           String                          @unique
    
    emailVerified                   DateTime?
    image                           String?
    
    // relations:
    adminPreference                 AdminPreference?                // an Admin may have one  related AdminPreference             // one  to one
    
    adminAccounts                   AdminAccount[]                  // an Admin may have some related AdminAccount(s)             // one  to many
    adminSessions                   AdminSession[]                  // an Admin may have some related AdminSession(s)             // one  to many
    adminCredentials                AdminCredentials?               // an Admin may have one  related AdminCredentials            // one  to one
    adminPasswordResetToken         AdminPasswordResetToken?        // an Admin may have one  related AdminPasswordResetToken     // one  to one
    adminEmailConfirmationToken     AdminEmailConfirmationToken?    // an Admin may have one  related AdminEmailConfirmationToken // one  to one
    
    adminRoleId                     String?
    adminRole                       AdminRole?                      @relation(fields: [adminRoleId], references: [id], onDelete: SetNull) // preserve the related Admin(s) if the AdminRole deleted
}
model AdminPreference {
    // records:
    id                              String                          @id @default(cuid()) @map("_id")
    
    // data:
    emailOrderNewPending            Boolean?
    emailOrderNewPaid               Boolean?
    emailOrderCanceled              Boolean?
    emailOrderExpired               Boolean?
    emailOrderConfirmed             Boolean?
    emailOrderRejected              Boolean?
    emailOrderProcessing            Boolean?
    emailOrderShipping              Boolean?
    emailOrderCompleted             Boolean?
    
    // relations:
    adminId                         String                          @unique
    admin                           Admin                           @relation(fields: [adminId], references: [id], onDelete: Cascade) // delete the related AdminPreference if the Admin deleted
}



// admin-auth models --------------------------------------------------------------------------



model AdminAccount {
    // records:
    id                              String                          @id @default(cuid()) @map("_id")
    
    // provider types:
    type                            String
    provider                        String
    providerAccountId               String
    @@unique([provider, providerAccountId])
    
    // jwt sessions:
    refresh_token                   String?
    access_token                    String?
    expires_at                      Int?
    
    // jwt meta:
    token_type                      String?
    scope                           String?
    id_token                        String?
    session_state                   String?
    
    // relations:
    adminId                         String
    admin                           Admin                           @relation(fields: [adminId], references: [id], onDelete: Cascade) // delete the related AdminAccount(s) if the Admin deleted
}

model AdminSession {
    // records:
    id                              String                          @id @default(cuid()) @map("_id")
    expires                         DateTime
    
    // data:
    sessionToken                    String                          @unique
    
    // relations:
    adminId                         String
    admin                           Admin                           @relation(fields: [adminId], references: [id], onDelete: Cascade) // delete the related AdminSession(s) if the Admin deleted
}

model AdminCredentials {
    // records:
    id                              String                          @id @default(cuid()) @map("_id")
    
    // data:
    failureAttempts                 Int?
    lockedAt                        DateTime?
    username                        String?                         @unique
    password                        String?
    
    // relations:
    adminId                         String                          @unique
    admin                           Admin                           @relation(fields: [adminId], references: [id], onDelete: Cascade) // delete the related AdminCredentials if the Admin deleted
}

model AdminPasswordResetToken {
    // records:
    id                              String                          @id @default(cuid()) @map("_id")
    updatedAt                       DateTime                        @updatedAt
    expiresAt                       DateTime
    
    // data:
    token                           String                          @unique
    
    // relations:
    adminId                         String                          @unique
    admin                           Admin                           @relation(fields: [adminId], references: [id], onDelete: Cascade) // delete the related AdminPasswordResetToken if the Admin deleted
}

model AdminEmailConfirmationToken {
    // records:
    id                              String                          @id @default(cuid()) @map("_id")
    
    // data:
    token                           String                          @unique
    
    // relations:
    adminId                         String                          @unique
    admin                           Admin                           @relation(fields: [adminId], references: [id], onDelete: Cascade) // delete the related AdminEmailConfirmationToken if the Admin deleted
}

model AdminRole {
    // records:
    id                              String                          @id @default(cuid()) @map("_id")
    
    // data:
    name                            String                          @unique
    
    product_r                       Boolean                         @default(false)
    product_c                       Boolean                         @default(false)
    product_ud                      Boolean                         @default(false)
    product_ui                      Boolean                         @default(false)
    product_up                      Boolean                         @default(false)
    product_us                      Boolean                         @default(false)
    product_uv                      Boolean                         @default(false)
    product_d                       Boolean                         @default(false)
    
    order_r                         Boolean                         @default(false)
    order_us                        Boolean                         @default(false)
    order_usa                       Boolean                         @default(false)
    order_upmu                      Boolean                         @default(false)
    order_upmp                      Boolean                         @default(false)
    
    shipping_r                      Boolean                         @default(false)
    shipping_c                      Boolean                         @default(false)
    shipping_ud                     Boolean                         @default(false)
    shipping_up                     Boolean                         @default(false)
    shipping_uv                     Boolean                         @default(false)
    shipping_d                      Boolean                         @default(false)
    
    admin_r                         Boolean                         @default(false)
    admin_c                         Boolean                         @default(false)
    admin_un                        Boolean                         @default(false)
    admin_uu                        Boolean                         @default(false)
    admin_ue                        Boolean                         @default(false)
    admin_up                        Boolean                         @default(false)
    admin_ui                        Boolean                         @default(false)
    admin_ur                        Boolean                         @default(false)
    admin_d                         Boolean                         @default(false)
    
    role_c                          Boolean                         @default(false)
    role_u                          Boolean                         @default(false)
    role_d                          Boolean                         @default(false)
    
    // relations:
    admins                          Admin[]                         // a AdminRole may have some related Admin(s)  // one  to many
}
