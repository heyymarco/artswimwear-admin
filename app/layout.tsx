'use client'

// themes:
import '@/theme.config'
import './layoutStyles.scss'

// next-auth:
import {
    NextAuthSessionProvider,
}                           from './NextAuthSessionProvider'

// cssfn:
import { styleSheets } from '@cssfn/core'

import { StylesCSR } from './StylesCSR' // client_side_rendering CSS (required)
import { StylesSSR } from './StylesSSR' // server_side_rendering CSS (optional)

import { Header } from './Header'
import { Footer } from './Footer'

import { store } from '@/store/store'
import { Provider } from 'react-redux'

import { WEBSITE_LANGUAGE } from '@/website.config'
import { FetchErrorMessage, DialogMessageProvider } from '@reusable-ui/components'



// styles:
styleSheets(
    () => import(/* webpackPrefetch: true */ './layoutStyles')
, { id: 'layout-eh4gver0nl' }); // a unique salt for SSR support, ensures the server-side & client-side have the same generated class names



// export const metadata = {
//     title: 'Create Next App',
//     description: 'Generated by create next app',
// }



// handlers:
const fetchErrorMessageDefault : FetchErrorMessage = ({isRequestError, isClientError: _isClientError, isServerError}) => {
    // jsx:
    return (
        <>
            <p>
                Oops, there was an error saving your data.
                <br />
                We were unable to save data to the server.
            </p>
            {isRequestError && <p>
                There was a <strong>problem contacting our server</strong>.
                <br />
                Make sure your internet connection is available.
            </p>}
            {isServerError && <p>
                There was a <strong>problem on our server</strong>.
                <br />
                The server may be busy or currently under maintenance.
            </p>}
            {isServerError && <p>
                Please try again in a few minutes.
                <br />
                If the problem still persists, please contact our technical support.
            </p>}
        </>
    );
};



export default function RootLayout({
    children,
}: {
    children: React.ReactNode
}) {
    // jsx:
    return (
        <html lang={WEBSITE_LANGUAGE}>
            <head>
                <StylesCSR />
                <StylesSSR />
            </head>
            <body>
                <NextAuthSessionProvider>
                    <Provider store={store}>
                        <DialogMessageProvider
                            fetchErrorMessageDefault={fetchErrorMessageDefault}
                        >
                            <Header />
                            
                            {children}
                            
                            <Footer />
                        </DialogMessageProvider>
                    </Provider>
                </NextAuthSessionProvider>
            </body>
        </html>
    )
}
