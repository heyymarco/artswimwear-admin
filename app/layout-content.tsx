'use client'

// styles:
import {
    StylesCSR,
}                           from './StylesCSR'                  // client_side_rendering CSS (required)
import {
    StylesSSR,
}                           from './StylesSSR'                  // server_side_rendering CSS (optional)
import {
    styleSheets,
}                           from '@cssfn/core'                  // writes css in vanilla-js

// themes:
import '@/theme.config'
import './layout-styles.scss'

// react:
import {
    // react:
    default as React,
}                           from 'react'

// redux:
import {
    Provider,
}                           from 'react-redux'

// next-auth:
import {
    NextAuthSessionProvider,
}                           from './NextAuthSessionProvider'

// reusable-ui components:
import {
    // utility-components:
    FetchErrorMessage,
    DialogMessageProvider,
}                           from '@reusable-ui/components'      // a set of official Reusable-UI components

// stores:
import {
    store,
}                           from '@/store/store'

// internal components:
import {
    Scroller,
}                           from './Scroller'

// configs:
import {
    WEBSITE_LANGUAGE,
}                           from '@/website.config'



// styles:
styleSheets(
    () => import(/* webpackPrefetch: true */ './layout-styles')
, { id: 'layout-eh4gver0nl' }); // a unique salt for SSR support, ensures the server-side & client-side have the same generated class names



// export const metadata = {
//     title: 'Create Next App',
//     description: 'Generated by create next app',
// }



// handlers:
const fetchErrorMessageDefault : FetchErrorMessage = ({isRequestError, isClientError: _isClientError, isServerError}) => {
    // jsx:
    return (
        <>
            <p>
                Oops, there was an error saving your data.
                <br />
                We were unable to save data to the server.
            </p>
            {isRequestError && <p>
                There was a <strong>problem contacting our server</strong>.
                <br />
                Make sure your internet connection is available.
            </p>}
            {isServerError && <p>
                There was a <strong>problem on our server</strong>.
                <br />
                The server may be busy or currently under maintenance.
            </p>}
            {isServerError && <p>
                Please try again in a few minutes.
                <br />
                If the problem still persists, please contact our technical support.
            </p>}
        </>
    );
};



// react components:
export function RootLayoutContent({
    // children:
    header,
    children,
}: {
    // children:
    header   : React.ReactNode
    children : React.ReactNode
}): JSX.Element|null {
    // jsx:
    return (
        <html lang={WEBSITE_LANGUAGE}>
            <head>
                <StylesCSR />
                <StylesSSR />
            </head>
            <body>
                <NextAuthSessionProvider>
                    <Provider store={store}>
                        <DialogMessageProvider
                            fetchErrorMessageDefault={fetchErrorMessageDefault}
                        >
                            <RootLayoutContentInternal
                                // children:
                                header={header}
                            >
                                {children}
                            </RootLayoutContentInternal>
                        </DialogMessageProvider>
                    </Provider>
                </NextAuthSessionProvider>
            </body>
        </html>
    );
}
function RootLayoutContentInternal({
    // children:
    header,
    children,
}: {
    // children:
    header   : React.ReactNode
    children : React.ReactNode
}): JSX.Element|null {
    // jsx:
    return (
        <>
            {header}
            
            <Scroller>
                {children}
            </Scroller>
        </>
    );
}
